global !p
def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)


#this function is similar to add table
#don't know how merge yet
def add_mat(snip):
	t = snip.buffer[snip.line].strip()[0]
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{" + t + "matrix}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += "\\end{" + t + "matrix}\n${0}"
	snip.expand_anon(final_str)



# fromm Gilles Castel
# don't understand this????
# https://vi.stackexchange.com/questions/18490/ultisnips-context-and-tex
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
# <--- Gilles Castel
endglobal

# adapted from  ---> Gilles Castel
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "\bnin\b" "not in " rA
\not\in 
endsnippet

context "math()"
snippet "\bEE\b" "geq" rA
\exists 
endsnippet

context "math()"
snippet "\bAA\b" "forall" rA
\forall 
endsnippet

context "math()"
snippet "\bidf\b" "\sqrt{}" rA
\idf{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet "\bsq\b" "\sqrt{}" rA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet "xs" "^3" rA
_{$1}^{$2}$0
endsnippet

context "math()"
snippet "inn" "^3" rA
\inner{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "\biff\b" "iff" rA
\iff
endsnippet

context "math()"
snippet "=>" "implies" rA
\implies
endsnippet

context "math()"
snippet "<=" "implied by" Ar
\impliedby
endsnippet

context "math()"
snippet "\boo\b" "\infty" rA
\infty
endsnippet

context "math()"
snippet "\bxnn\b" "xn" rA
x_n
endsnippet

context "math()"
snippet "\bynn\b" "yn" rA
y_n
endsnippet


context "math()"
snippet "\bxii\b" "xi" rA
x_i
endsnippet

context "math()"
snippet "\byii\b" "yi" rA
y_i
endsnippet

context "math()"
snippet "\bxjj\b" "xj" rA
x_i
endsnippet

context "math()"
snippet "\byjj\b" "yj" rA
y_i
endsnippet


context "math()"
snippet "\bxpo\b" "x" rA
x_{n+1}
endsnippet

context "math()"
snippet "\bxmm\b" "xm" rA
x_m
endsnippet
# <--- Gilles Castel

#priority 1000
#context "math()"
#snippet zh "\infty" iA
#^{($1)}$0
#endsnippet
#
#priority 1000
#context "math()"
#snippet zl "\infty" iA
#_{($1)}$0
#endsnippet


pre_expand "add_mat(snip)"
snippet "(p|b)mat(\d+)x(\d+)" "generate matrix" br
endsnippet




snippet nc 
\newcommand{\\${1:cmd}}[${2:0}]{${3:realcmd}} ${0}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet "b(egin)?" "begin{} / end{}" br
\begin{${1:env}}
	${0:${VISUAL}}
\end{$1}
endsnippet


snippet dm "begin \[\]" bA
\[
	${0:${VISUAL}}
.\]
endsnippet 

snippet theorem "begin theorem" b
\begin{theorem}
	${0:${VISUAL}}
\end{theorem}
endsnippet

snippet lemma "begin lemma" b
\begin{lemma}
	${0:${VISUAL}}
\end{lemma}
endsnippet

snippet proof "begin proof" b
\begin{proof}
	${0:${VISUAL}}
\end{proof}
endsnippet

snippet enum "begin enumerate" b
\begin{enumerate}
	\item
	${0:${VISUAL}}
	\item
\end{enumerate}
endsnippet 

snippet enumi "begin enumerate in roman" b
\begin{enumerate}{(i)}
	\item
	${0:${VISUAL}}
	\item
\end{enumerate}
endsnippet 

snippet enuma "begin enumerate in english" b
\begin{enumerate}{(a)}
	\item
	${0:${VISUAL}}
	\item
\end{enumerate}
endsnippet 

snippet gat "begin gather" b
\begin{gather}
	${0:${VISUAL}}
\end{gather}
endsnippet 

snippet gat* "begin gather*" b
\begin{gather*}
	${0:${VISUAL}}
\end{gather*}
endsnippet 

snippet eq "begin equation" b
\begin{equation}
	${0:${VISUAL}}
\end{equation}
endsnippet 


snippet eq* "begin equation" b
\begin{equation*}
	${0:${VISUAL}}
\end{equation*}
endsnippet 

snippet al "begin align" b
\begin{align}
	${0:${VISUAL}}
\end{align}
endsnippet 


snippet al* "begin align*" b
\begin{align*}
	${0:${VISUAL}}
\end{align*}
endsnippet 

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet label "\label{}"
\label{${1}}${0}
endsnippet

snippet ref "\ref{}"
\ref{${1}}${0}
endsnippet


context "math()"
snippet // "\frac{}{}" iA
\frac{${1:nume}}{${2:denom}}${0}
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

#########################
##common customized expr

context "math()"
snippet "\bset\b" "\sset{}" rA
\set{${1:${VISUAL}}}${0}
endsnippet 


context "math()"
snippet "\bpr\b" "\prob{}" rA
\prob{${1:${VISUAL}}}${0}
endsnippet 

context "math()"
snippet "\bcpr\b" "\cprob{}{}" rA
\cprob{$1}{${2:condition}}${0}
endsnippet 

context "math()"
snippet "\bex\b" "\expect{}" rA
\expect{${1:${VISUAL}}}${0}
endsnippet 

context "math()"
snippet "\bcex\b" "\cexpect{}{}" rA
\cexpect{$1}{${2:condition}}${0}
endsnippet 

context "math()"
snippet inv "inverse" iA
^{-1}$0
endsnippet

context "math()"
snippet tran "transpose" iA
^{\top}$0
endsnippet

context "math()"
snippet comp "transpose" iA
^{\complement}$0
endsnippet

#some aweward names 
# somehow auto expansion only supports
# three-letter name for rA option 
context "math()"
snippet "gra" "\nabla" rA
\nabla
endsnippet

context "math()"
snippet "hes" "\nabla" rA
\nabla^2
endsnippet

context "math()"
snippet "flo" "\nabla" rA
\floor{$1}$0
endsnippet

context "math()"
snippet "cei" "\nabla" rA
\ceil{$1}$0
endsnippet

#context "math()"
#snippet "finv\b" "\invf{}" rA
#\finv{${1:${VISUAL}}}${0}
#endsnippet

#context "math()"
#snippet "\b(tra)\b" "\trans{}" rA
#\tran{${1:${VISUAL}}}${0}
#endsnippet

context "math()"
snippet "\bnm\b" "\norm{}" rA
\norm{${1:${VISUAL}}}${0}
endsnippet 



context "math()"
snippet "\babs\b" "\abs{}" rA
\abs{${1:${VISUAL}}}${0}
endsnippet 


####------------------
# greek letter
context "math()"
snippet 𝒢a "\alpha" A
\alpha
endsnippet 


context "math()"
snippet 𝒢b "\beta" A
\beta
endsnippet 

context "math()"
snippet 𝒢d "\delta" A
\delta
endsnippet 

context "math()"
snippet 𝒢D "\Delta" A
\Delta
endsnippet 

context "math()"
snippet 𝒢e "\varepsilon" A
\varepsilon
endsnippet 

context "math()"
snippet 𝒢g "\gamma" A
\gamma
endsnippet 

context "math()"
snippet 𝒢G "\Gamma" A
\Gamma
endsnippet 

context "math()"
snippet 𝒢l "\lambda" A
\lambda
endsnippet 

context "math()"
snippet 𝒢L "\Lambda" A
\Lambda
endsnippet 

context "math()"
snippet 𝒢m "\mu" A
\mu
endsnippet 

context "math()"
snippet 𝒢n "\nu" A
\nu
endsnippet 

#e is taken by epsilon
#use e since cap letter of eta 
#looks like h
context "math()"
snippet 𝒢h "\eta" A
\eta
endsnippet 

context "math()"
snippet 𝒢p "\varphi" A
\varphi
endsnippet 

context "math()"
snippet 𝒢o "\omega" A
\omega
endsnippet 

context "math()"
snippet 𝒢O "\Omega" A
\Omega
endsnippet 


context "math()"
snippet 𝒢P "\Phi" A
\Phi
endsnippet 

#t is taken by \tau
#no meaning for q
context "math()"
snippet 𝒢q "\theta" A
\theta
endsnippet 

context "math()"
snippet 𝒢r "\varrho" A
\varrho
endsnippet 

context "math()"
snippet 𝒢s "\sigma" A
\sigma
endsnippet 


context "math()"
snippet 𝒢S "\Sigma" A
\Sigma
endsnippet 

context "math()"
snippet 𝒢t "\tau" A
\tau
endsnippet 





####------------------



#deadly ninjia weapon
#snippet "'([^\.]+)\.([^\.]+)\.([^\.]+)'" "Description" r
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}^{`!p snip.rv = match.group(3)`}${0}
#endsnippet

#snippet "\b([^\.]+)\.([^\.]+)\.([^\.]+)\b" "Description" r
#snippet "\s([^;]+);([^;]+);([^;]+)\s" "Description" r
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}^{`!p snip.rv = match.group(3)`}${0}
#endsnippet
#
##snippet "\b([^\.]+)\.([^\.]+)\b" "Description" r
#snippet "\s([^\;]+);([^;]+)\s" "Description" r
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}${0}
#endsnippet
#
#snippet "\s([^;]+);\.([^;]+)\s" "Description" r
#`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}${0}
#endsnippet



snippet "\b(sum|inf|max|min|sup|argmin|argmax) (.+) in (.+)" "Description" r
\\`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)` \in `!p snip.rv = match.group(3)`}${0}
endsnippet

#

snippet "\bsum(.+) (.+) to (.+)" "Description" r
\sum_{`!p snip.rv = match.group(1)`=`!p snip.rv = match.group(2)`}^{`!p snip.rv = match.group(3)`}${0}
endsnippet

snippet "\blim(.+)" "Description" r
\lim_{`!p snip.rv = match.group(1)` \to \infty}${0}
endsnippet



####################
# template


snippet template "template for latex"



% --------------------------------------------------------------
% This is all preamble stuff that you don't have to worry about.
% Head down to where it says "Start here"
% --------------------------------------------------------------
 
\documentclass[12pt]{article}
 
\usepackage[margin=0.2in]{geometry} 
\usepackage{desmacro}
\input{despkg}
% uncommnet the following if xr-hyper is used
% \externaldocument[prefix]{path to tex}[url to pdf]
% for example \externaldocument[V-]{./sub/scribe}[./sub/scribe.pdf]
%  bear note has a working version


 
\begin{document}
 
% --------------------------------------------------------------
%                         Start here
% --------------------------------------------------------------
 
%\renewcommand{\qedsymbol}{\filledbox}
 
\title{${1}}%replace X with the appropriate number
\author{${2} %replace with your name
} %if necessary, replace with your course title
\date{}
\maketitle

%solution
\begin{enumerate}
%problem 1%
\item 
\begin{enumerate}{(i)}
\item a

\end{enumerate}
%end of all problems%
\end{enumerate}

 
% --------------------------------------------------------------
%     You don't have to mess with anything below this line.
% --------------------------------------------------------------
 
\end{document}











endsnippet

